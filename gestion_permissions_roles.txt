# Gestion personnalisée des permissions et rôles Laravel – Documentation technique exhaustive

---

## 1. Structure de la base de données

### 1.1 Tables principales
- **roles** :
  - id (PK)
  - name (string, unique)
  - description (string, nullable)
  - guard_name (string, nullable)
  - timestamps
- **permissions** :
  - id (PK)
  - name (string, unique)
  - description (string, nullable)
  - timestamps
- **role_permission** (table pivot) :
  - id (PK)
  - role_id (FK vers roles)
  - permission_id (FK vers permissions)
  - timestamps
  - unique(role_id, permission_id)
- **users** :
  - id (PK)
  - name, email, password, etc.
  - role_id (FK vers roles)
  - autres champs utilisateur

#### 1.2 Exemple de migration de la table pivot
```php
Schema::create('role_permission', function (Blueprint $table) {
    $table->id();
    $table->foreignId('role_id')->constrained()->onDelete('cascade');
    $table->foreignId('permission_id')->constrained()->onDelete('cascade');
    $table->timestamps();
    $table->unique(['role_id', 'permission_id']);
});
```

---

## 2. Modèles Eloquent et relations

### 2.1 Modèle Role
```php
class Role extends Model {
    protected $fillable = ['name', 'description', 'guard_name'];
    public function permissions() {
        return $this->belongsToMany(Permission::class, 'role_permission');
    }
    public function users() {
        return $this->hasMany(User::class);
    }
    public function hasPermission(string $permission): bool {
        return $this->permissions()->where('name', $permission)->exists();
    }
    public function givePermissionsTo(array $permissions): void {
        $this->permissions()->sync($permissions);
    }
    public function revokePermissionsTo(array $permissions): void {
        $this->permissions()->detach($permissions);
    }
}
```

### 2.2 Modèle Permission
```php
class Permission extends Model {
    protected $fillable = ['name', 'description'];
    public function roles() {
        return $this->belongsToMany(Role::class, 'role_permission');
    }
}
```

### 2.3 Modèle User
```php
class User extends Authenticatable {
    protected $fillable = ['name', 'email', 'password', 'role_id'];
    public function role() {
        return $this->belongsTo(Role::class);
    }
    use HasPermissions; // Trait expliqué ci-dessous
    // ... autres relations (achats, ventes, etc.)
}
```

---

## 3. Trait HasPermissions (app/Traits/HasPermissions.php)
Ce trait centralise la logique d'accès aux permissions pour l'utilisateur.

```php
trait HasPermissions {
    public function hasPermission($permission): bool {
        if (!$this->role) return false;
        return $this->role->permissions->contains('name', $permission);
    }
    public function hasAnyPermission(array $permissions): bool {
        if (!$this->role) return false;
        return $this->role->permissions->whereIn('name', $permissions)->isNotEmpty();
    }
    public function hasAllPermissions(array $permissions): bool {
        if (!$this->role) return false;
        return $this->role->permissions->whereIn('name', $permissions)->count() === count($permissions);
    }
}
```
- **Avantage** : toute la logique d'autorisation est centralisée, testable, et réutilisable.

---

## 4. Seeders (initialisation des rôles et permissions)

### 4.1 PermissionSeeder
- Crée toutes les permissions nécessaires au projet.
- Utilise `Permission::firstOrCreate` pour éviter les doublons.
- Exemple d'ajout :
```php
$permissions = [
    'achats.view' => 'Voir les achats',
    'achats.create' => 'Créer un achat',
    // ...
];
foreach ($permissions as $name => $description) {
    Permission::firstOrCreate(['name' => $name], ['description' => $description]);
}
```

### 4.2 RolePermissionSeeder
- Crée les rôles (admin, manager, user, etc.)
- Attribue les permissions à chaque rôle via la table pivot.
- Exemple :
```php
$role = Role::firstOrCreate(['name' => 'admin'], ['description' => 'Administrateur']);
$role->permissions()->sync(Permission::all()->pluck('id')->toArray());
```
- Le rôle admin reçoit toutes les permissions.

---

## 5. Middleware d'autorisation (CheckPermission)

### 5.1 Fonctionnement
- Vérifie que l'utilisateur connecté possède la permission demandée.
- Si non, retourne une vue 403 personnalisée.

```php
public function handle(Request $request, Closure $next, string $permission): Response {
    if (!$request->user() || !$request->user()->hasPermission($permission)) {
        return response()->view('errors.403', [], 403);
    }
    return $next($request);
}
```

### 5.2 Utilisation
- Peut être appliqué dans les routes (middleware) ou dans les contrôleurs (vérification manuelle).
- Exemple dans un contrôleur :
```php
if (!Auth::user()->hasPermission('achats.create')) {
    abort(403);
}
```

---

## 6. Utilisation concrète dans l'application

### 6.1 Vérification dans les contrôleurs
- Avant chaque action sensible (CRUD, export, etc.), on vérifie la permission.
- Les permissions sont nommées de façon explicite : `module.action` (ex : achats.create, ventes.edit)

### 6.2 Attribution dynamique
- Pour modifier les permissions d'un rôle :
```php
$role = Role::where('name', 'manager')->first();
$permission = Permission::where('name', 'achats.create')->first();
$role->permissions()->attach($permission->id);
```
- Pour retirer une permission :
```php
$role->permissions()->detach($permission->id);
```

---

## 7. Gestion des erreurs et sécurité
- Toujours vérifier les permissions côté backend (jamais seulement côté front)
- Retourner une erreur 403 claire en cas d'accès refusé
- Ne jamais donner le rôle admin à un utilisateur sans contrôle
- Protéger les routes sensibles avec le middleware ou des vérifications manuelles
- Utiliser des noms de permissions explicites et cohérents

---

## 8. Extension et personnalisation
- Pour ajouter une UI de gestion des rôles/permissions : utiliser les modèles et relations existants
- Pour une granularité plus fine (ex : permissions individuelles par utilisateur), ajouter une table user_permission et adapter le trait
- Pour auditer les changements, ajouter un log sur les modifications de rôles/permissions

---

## 9. Bonnes pratiques
- Centraliser la logique d'autorisation dans un trait ou un service
- Utiliser des seeders pour garantir la cohérence des rôles/permissions en dev et prod
- Documenter chaque permission et rôle dans le code et la doc métier
- Tester les cas d'accès refusé (tests HTTP/Feature)

---

## 10. Schéma d'architecture (exemple)

```mermaid
graph TD;
  User-->|role_id|Role;
  Role-->|role_permission|Permission;
  User-->|hasPermission()|Permission;
```

---

## 11. Cas d'usage concrets
- **Créer un nouveau rôle** : ajouter dans le seeder, définir les permissions, lancer le seeder
- **Ajouter une nouvelle permission** : idem, puis l'attribuer aux rôles concernés
- **Vérifier l'accès à une page** :
```php
if (!Auth::user()->hasPermission('ventes.edit')) {
    abort(403);
}
```
- **Afficher des boutons conditionnels dans les vues** :
```blade
@if(Auth::user()->hasPermission('ventes.delete'))
    <button>Supprimer</button>
@endif
```

---

## 12. Conseils pour l'extension
- Pour une gestion multi-guard (API, admin, etc.), ajouter le champ guard_name et adapter la logique
- Pour la gestion des permissions héritées, prévoir une hiérarchie de rôles (non implémenté ici)
- Pour l'audit, loguer chaque changement de permission/rôle

---

**Cette architecture permet une gestion robuste, centralisée, testable et évolutive des permissions et rôles, sans dépendance à un package externe.**

Pour toute extension, il suffit d'ajouter les relations ou tables nécessaires et d'adapter le trait HasPermissions. 